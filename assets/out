#!/bin/sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

PATH=/usr/local/bin:$PATH

source_dir=$1

if [ -z "$source_dir" ]; then
  echo "usage: $0 <path/to/source>" >&2
  exit 1
fi

mkdir -p $source_dir

payload=$(mktemp /tmp/k8s-resource-request.XXXXXX)

cat > $payload <&0

cd $source_dir

url=$(jq -r '.source.url // ""' < $payload)
namespace=$(jq -r '.source.namespace // ""' < $payload)
spec_path=$(jq -r '.params.spec_path // ""' < $payload)

if [ -z "$url" ]; then
  echo "must specify source url"
  exit 1
fi

if [ -z "$namespace" ]; then
  echo "must specify source namespace"
  exit 1
fi

if [ -z "$spec_path" ]; then
  echo "must specify param spec_path"
  exit 1
fi

skip_tls_verify=$(jq -r '.source.skip_tls_verify // ""' < $payload)
if [ "$skip_tls_verify" = "true" ]; then
  insecure_skip_tls_verify="--insecure-skip-tls-verify"
fi

cert_data=$(jq -r '.source.cert_data // ""' < $payload)
if [ -n "${cert_data}" ]; then
  cert_file=$(mktemp /tmp/k8s-resource-certfile.XXXXXX)
  echo "$cert_data" > $cert_file
  client_certificate="--client-certificate $cert_file"
fi

key_data=$(jq -r '.source.key_data // ""' < $payload)
if [ -n "$key_data" ]; then
  key_file=$(mktemp /tmp/k8s-resource-keyfile.XXXXXX)
  echo "$key_data" > $key_file
  client_key="--client-key $key_file"
fi

ca_data=$(jq -r '.source.ca_data // ""' < $payload)
if [ -n "$ca_data" ]; then
  ca_file=$(mktemp /tmp/k8s-resource-cafile.XXXXXX)
  echo "$ca_data" > $ca_file
  certificate_authority="--certificate-authority $ca_file"
fi

echo "server: $url"
echo "namespace: $namespace"
version=`cat ./git_hash/version`
echo $version
sed -i "s/:latest/:v$version/g" $spec_path
cat "$spec_path"

kubectl apply \
  --server "$url" \
  --namespace "$namespace" \
  $insecure_skip_tls_verify \
  $client_certificate \
  $client_key \
  $certificate_authority \
  --filename "$spec_path"

echo "Check deploymentis status..."
cat "$spec_path" |grep -A10 Deployment|grep '^  name:' |awk '{print $2}'|sed 's/"//g' > ./git_hash/deployments
cat ./git_hash/deployments
sleep 10
while read line; do

echo "Test deployment: $line..."
x=0
#echo $x
deploy="begin"
while [ "$deploy" != "ok" ]; do
        allrep=`kubectl get deployment $line -o json --server "$url" --namespace "$namespace" \
                $insecure_skip_tls_verify \
                $client_certificate \
                $client_key \
                $certificate_authority  |grep -A5 \"status\": |grep replicas| awk '{ print $2}'|sed 's/,//g'`
	      #echo $allrep

        updrep=`kubectl get deployment $line -o json --server "$url" --namespace "$namespace" \
                $insecure_skip_tls_verify \
                $client_certificate \
                $client_key \
                $certificate_authority  |grep -A5 \"status\": |grep \"availableReplicas| awk '{ print $2}'|sed 's/,//g'`
	if [ "$updrep" == "" ]
		then
		updrep=0
	fi

        #echo $updrep

        if [ "$allrep" -eq "$updrep" ]
                then
                        deploy="ok"
        fi

        sleep 2
        x=$((x+1))
	#echo $x
        #let ++x
        echo -n "."
        if [ "$x" -gt  100 ]; then
                echo "Deploy $line failed."
                exit 1
                break
        fi
done
echo "Deploy $line OK"

done < ./git_hash/deployments

echo "All deployments updated."

timestamp=$(date)

jq -n '{
  "version": {
    "Updated at": $timestamp
  },
  "metadata": [
    {"name": "namespace", "value": $namespace}
  ]
}' --arg timestamp "$timestamp" --arg namespace "$namespace" >&3

exit 0
